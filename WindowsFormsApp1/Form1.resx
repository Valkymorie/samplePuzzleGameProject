<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox17.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>